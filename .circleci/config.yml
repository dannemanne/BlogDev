version: 2.1 # Use 2.1 to enable using orbs and other features.

# Declare the orbs that we'll use in our config.
# read more about orbs: https://circleci.com/docs/2.0/using-orbs/
orbs:
  ruby: circleci/ruby@1.0
  node: circleci/node@2

defaults: &defaults
  working_directory: ~/repo

jobs:
  build: # Job #1: "build"
    <<: *defaults
    docker:
      - image: cimg/ruby:2.6-node
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
      - run:
          name:  Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
      - persist_to_workspace:
          root: tmp
          paths:
            - cc-test-reporter

  test: # Job #2: "test"
    <<: *defaults
    docker:
      - image: cimg/ruby:2.6-node # this is our primary docker image, where step commands run.
      - image: circleci/postgres:9.5-alpine
        environment: # add POSTGRES environment variables.
          POSTGRES_USER: postgres
          POSTGRES_DB: Blog_test
          POSTGRES_PASSWORD: ""
    # environment variables specific to Ruby/Rails, applied to the primary container.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
#      PGHOST: 127.0.0.1
#      PGUSER: circleci-demo-ruby
#      PGPASSWORD: ""
      RAILS_ENV: test
      DATABASE_URL: "postgres://postgres@127.0.0.1:5432/Blog_test"
    # A series of steps to run, some are similar to those in "build".
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo/tmp
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
      # Here we make sure that the secondary container boots
      # up before we run operations on the database.
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace
      # Run rspec in parallel
      - ruby/rspec-test
      - run:
          name: Format Coverage
          command: |
            bundle exec rake
            ./tmp/cc-test-reporter format-coverage -t simplecov -o tmp/codeclimate.backend.json coverage/.resultset.json
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.backend.json

  upload-coverage:
    <<: *defaults
    docker:
      - image: cimg/ruby:2.6-node
    environment:
      - CC_TEST_REPORTER_ID: 9051ffd89c60b09a41e5f64ab65076b0a58e7a58fbefffd88215fc83df325dd0
    steps:
      - attach_workspace:
          at: ~/repo/tmp
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter sum-coverage tmp/codeclimate.*.json -p 2 -o tmp/codeclimate.total.json
            ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.total.json

# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
      - upload-coverage:
          requires:
            - test
